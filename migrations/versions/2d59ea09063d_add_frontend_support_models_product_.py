"""Add frontend support models: Product, Flight, PackingJob, DrawerInventory, ConsumptionRecord and extend ItemBatch and Drawer

Revision ID: 2d59ea09063d
Revises: 8351523323ca
Create Date: 2025-10-26 04:11:25.843486

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2d59ea09063d'
down_revision = '8351523323ca'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create enum types first for PostgreSQL (if they don't exist)
    from sqlalchemy import inspect
    conn = op.get_bind()
    inspector = inspect(conn)

    # Check if enum types exist, create only if they don't
    existing_types = conn.execute(sa.text("SELECT typname FROM pg_type WHERE typtype = 'e'")).fetchall()
    existing_type_names = [t[0] for t in existing_types]

    if 'drawerside' not in existing_type_names:
        op.execute("CREATE TYPE drawerside AS ENUM ('front', 'back')")
    if 'flightstatus' not in existing_type_names:
        op.execute("CREATE TYPE flightstatus AS ENUM ('pending', 'in_progress', 'completed')")
    if 'packingjobdrawerstatus' not in existing_type_names:
        op.execute("CREATE TYPE packingjobdrawerstatus AS ENUM ('pending', 'completed')")

    op.create_table('flights',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('flight_number', sa.String(length=20), nullable=False),
    sa.Column('route', sa.String(length=100), nullable=False),
    sa.Column('departure_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('pending', 'in_progress', 'completed', name='flightstatus', create_type=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('flights', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_flights_flight_number'), ['flight_number'], unique=True)

    op.create_table('products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('ean', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('product_type', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_products_ean'), ['ean'], unique=True)

    op.create_table('drawer_inventories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('drawer_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('priority_order', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['drawer_id'], ['drawers.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('packing_jobs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.String(length=50), nullable=False),
    sa.Column('flight_id', sa.UUID(), nullable=False),
    sa.Column('estimated_time_seconds', sa.Integer(), nullable=False),
    sa.Column('actual_time_seconds', sa.Integer(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('locked', sa.Boolean(), nullable=False),
    sa.Column('required_drawers', sa.Integer(), nullable=False),
    sa.Column('assigned_employee_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['assigned_employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('packing_jobs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_packing_jobs_job_id'), ['job_id'], unique=True)

    op.create_table('consumption_records',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('drawer_id', sa.UUID(), nullable=False),
    sa.Column('batch_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity_consumed', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=True),
    sa.Column('consumed_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['batch_id'], ['item_batches.id'], ),
    sa.ForeignKeyConstraint(['drawer_id'], ['drawers.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['packing_jobs.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('packing_job_drawers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('drawer_id', sa.UUID(), nullable=False),
    sa.Column('qr_code', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('pending', 'completed', name='packingjobdrawerstatus', create_type=False), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['drawer_id'], ['drawers.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['packing_jobs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('drawers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('qr_code', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('side', sa.Enum('front', 'back', name='drawerside', create_type=False), nullable=True))
        batch_op.create_index(batch_op.f('ix_drawers_qr_code'), ['qr_code'], unique=True)

    with op.batch_alter_table('item_batches', schema=None) as batch_op:
        batch_op.add_column(sa.Column('qr_code', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('lote_id', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('ean', sa.String(length=50), nullable=True))
        batch_op.create_index(batch_op.f('ix_item_batches_ean'), ['ean'], unique=False)
        batch_op.create_index(batch_op.f('ix_item_batches_qr_code'), ['qr_code'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('item_batches', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_item_batches_qr_code'))
        batch_op.drop_index(batch_op.f('ix_item_batches_ean'))
        batch_op.drop_column('ean')
        batch_op.drop_column('lote_id')
        batch_op.drop_column('qr_code')

    with op.batch_alter_table('drawers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_drawers_qr_code'))
        batch_op.drop_column('side')
        batch_op.drop_column('qr_code')

    op.drop_table('packing_job_drawers')
    op.drop_table('consumption_records')
    with op.batch_alter_table('packing_jobs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_packing_jobs_job_id'))

    op.drop_table('packing_jobs')
    op.drop_table('drawer_inventories')
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_products_ean'))

    op.drop_table('products')
    with op.batch_alter_table('flights', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_flights_flight_number'))

    op.drop_table('flights')

    # Drop enum types
    op.execute("DROP TYPE IF EXISTS drawerside")
    op.execute("DROP TYPE IF EXISTS flightstatus")
    op.execute("DROP TYPE IF EXISTS packingjobdrawerstatus")
    # ### end Alembic commands ###
